This document describes the lang_c backend, which translates awib bytecode
into the widely supported C programming language.

In addition to making awib an option for developers on nearly any platform,
this backend, in combination with a good C compiler, turns out to produce
very fast programs.

The backend operates by outputting a header which sets up memory and
defines a total of thirteen macros. Each macro corresponds to one of
the awib bytecode operation. The header is as follows:

 #include <stdio.h>
 #define eM(x) *p*x;
 #define eL(x) *(p+x)+=
 #define eK(x) *p*x;
 #define eJ(x) *(p-x)+=
 #define eI(x) *p=x;
 #define eH(x) }
 #define eG(x) while(*p){
 #define eF(x) p+=x;
 #define eE(x) p-=x;
 #define eD(x) putchar(*p);
 #define eC(x) *p-=x;
 #define eB(x) c=getchar();if(c>=0)*p=c;
 #define eA(x) *p+=x;
 char buf[0xffff];
 int main(){
 char *p=buf;
 int c;

After this, for each bytecode operation P(i), "eP(i)" is output. When all the
bytecode has been processed, a final footer terminating the C program is
output:

 return 0;}
